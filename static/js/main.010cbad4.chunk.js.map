{"version":3,"sources":["components/Header.js","components/Thumbnails.js","App.js","reportWebVitals.js","index.js"],"names":["Header","props","className","score","topScore","ImageThumb","alt","name","src","image","App","state","clicked","message","images","handleClick","id","click","characters","forEach","index","setState","sort","Math","random","count","this","map","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAaeA,MAVf,SAAgBC,GACZ,OACI,yBAAQC,UAAU,SAAlB,UACI,wDACA,wCAAWD,EAAME,SACjB,4CAAeF,EAAMG,gBCalBC,MAlBf,SAAoBJ,GAChB,OASI,aARA,CAQA,OAAKC,UAAU,QAAf,SAEI,qBAAKI,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,MAAOP,UAAU,qB,OCwD/CQ,E,4MArDbC,MAAQ,CACNR,MAAO,EACPC,SAAU,EACVQ,SAAS,EACTC,QAAS,GACTC,OAAQA,G,EAIVC,YAAc,SAACC,EAAIC,GACjB,IAAMC,EAAa,EAAKP,MAAMG,OAE9B,GAAIG,EAKF,OAJAC,EAAWC,SAAQ,SAACV,EAAOW,GACzBF,EAAWE,GAAOH,OAAQ,KAGrB,EAAKI,SAAS,CACnBP,OAAQI,EAAWI,MAAK,kBAAMC,KAAKC,SAAW,MAC9CX,QAAS,2BACTY,MAAO,IAKTP,EAAWC,SAAQ,SAACV,EAAOW,GACzB,GAAIJ,IAAOP,EAAMO,GAAI,CACnBE,EAAWE,GAAOH,OAAQ,EACN,EAAKN,MAAMc,W,4CAQvC,WACE,OACE,sBAAKvB,UAAU,YAAf,UACE,cAAC,EAAD,IACA,qBAAKA,UAAU,MAAf,SACGwB,KAAKf,MAAMG,OAAOa,KAAI,SAAAb,GAAM,OAC3B,cAAC,EAAD,CACEP,KAAMO,EAAOP,KACbE,MAAOK,EAAOL,oB,GA9CVmB,aCJHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.010cbad4.chunk.js","sourcesContent":["import React from \"react\";\n// import \"./style.css\";\n\nfunction Header(props) {\n    return (\n        <header className=\"header\">\n            <h1>Wanderlust Clicky Game</h1>\n            <p>Score: {props.score}</p>\n            <p>Top Score: {props.topScore}</p>\n        </header>\n    )\n}\n\nexport default Header;","import React from \"react\";\n\n\nfunction ImageThumb(props) {\n    return (\n        // <div className=\"card\">\n        //     <div className=\"img-container\">\n        //         <img alt={props.name} src={props.image} />\n        //     </div>\n        // </div>\n\n        // TESTING STUFF \n        // <div>\n        <div className=\"col-3\">\n            {/* Where does the onclick go? */}\n            <img alt={props.name} src={props.image} className=\"img-thumbnail\" />\n        </div>\n        // </div >\n    );\n}\n\nexport default ImageThumb;","import React, { Component } from \"react\";\nimport Header from \"./components/Header.js\"\nimport ImageThumb from \"./components/Thumbnails.js\";\nimport images from \"./images.json\";\n\n// What do I want to happen with the onclick?\n// If the card HAS NOT been clicked\n// Display message \n// Add one point to score\n// Shuffle cards\n\n// If the card HAS been clicked\n// Display message \"You lost\"\n//Shufflecards \n\n\nclass App extends Component {\n  // This is the starting \"state\" before anything has been clicked or changed.\n  state = {\n    score: 0,\n    topScore: 0,\n    clicked: false,\n    message: \"\",\n    images: images\n  };\n\n  // This function will handle the onclicks and control functions once the images have been clicked. \n  handleClick = (id, click) => {\n    const characters = this.state.images;\n    // If an image is clicked, the \"clicked\" state stays the same.\n    if (click) {\n      characters.forEach((image, index) => {\n        characters[index].click = false;\n      });\n      // If an image is clicked, sort the thumbnails. \n      return this.setState({\n        images: characters.sort(() => Math.random() - 0.5),\n        message: \"You guessed incorrectly!\",\n        count: 0\n      })\n    }\n\n    else {\n      characters.forEach((image, index) => {\n        if (id === image.id) {\n          characters[index].click = true;\n          const updateScore = this.state.count + 1;\n        }\n\n      })\n    }\n  }\n\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Header />\n        <div className=\"row\">\n          {this.state.images.map(images => (\n            <ImageThumb\n              name={images.name}\n              image={images.image}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}