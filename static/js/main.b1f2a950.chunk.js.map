{"version":3,"sources":["components/Header.js","components/Thumbnails.js","App.js","reportWebVitals.js","index.js"],"names":["Header","props","className","score","message","topScore","ImageThumb","alt","name","src","image","onClick","handleShuffle","id","clicked","App","state","images","click","console","log","places","forEach","index","setState","sort","Math","random","newScore","this","map","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAceA,MAXf,SAAgBC,GACZ,OACI,yBAAQC,UAAU,SAAlB,UACI,2FACA,wCAAWD,EAAME,SACjB,4BAAIF,EAAMG,UACV,4CAAeH,EAAMI,gBCIlBC,MAVf,SAAoBL,GAChB,OACI,qBAAKC,UAAU,gBAAf,SAEI,qBAAKK,IAAKN,EAAMO,KAAMC,IAAKR,EAAMS,MAAOR,UAAU,gBAAgBS,QAAS,kBAAMV,EAAMW,cAAcX,EAAMY,GAAIZ,EAAMa,e,OC+ElHC,E,4MApEbC,MAAQ,CACNb,MAAO,EACPE,SAAU,EACVS,SAAS,EACTV,QAAS,GACTa,OAAQA,G,EAKVL,cAAgB,SAACC,EAAIK,GACnBC,QAAQC,IAAI,UACZ,IAAMC,EAAS,EAAKL,MAAMC,OAE1B,IAAc,IAAVC,EAMF,OALAG,EAAOC,SAAQ,SAACZ,EAAOa,GAErBF,EAAOE,GAAOT,SAAU,KAGnB,EAAKU,SAAS,CACnBP,OAAQI,EAAOI,MAAK,kBAAMC,KAAKC,SAAW,MAC1CvB,QAAS,sCACTD,MAAO,IAKTkB,EAAOC,SAAQ,SAACZ,EAAOa,GACrB,GAAIV,IAAOH,EAAMG,GAAI,CACnBQ,EAAOE,GAAOT,SAAU,EACxB,IAAMc,EAAW,EAAKZ,MAAMb,MAAQ,EAGhByB,EAAW,EAAKZ,MAAMX,UAAsB,EAAKW,MAAMX,SAG7E,OAAO,EAAKmB,SAAS,CACnBP,OAAQI,EAAOI,MAAK,kBAAMC,KAAKC,SAAW,MAC1CvB,QAAS,6B,4CAUjB,WAAU,IAAD,OACP,OACE,sBAAKF,UAAU,YAAf,UACE,cAAC,EAAD,IACA,qBAAKA,UAAU,MAAf,SACG2B,KAAKb,MAAMC,OAAOa,KAAI,SAAAb,GAAM,OAC3B,cAAC,EAAD,CACET,KAAMS,EAAOT,KACbE,MAAOO,EAAOP,MACdE,cAAe,EAAKA,cACpBE,QAASG,EAAOH,sB,GA7DZiB,aCJHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.b1f2a950.chunk.js","sourcesContent":["import React from \"react\";\n// import \"./style.css\";\n\nfunction Header(props) {\n    return (\n        <header className=\"header\">\n            <h1>Wanderlust Clicky Game: Don't click the same image twice!</h1>\n            <p>Score: {props.score}</p>\n            <p>{props.message}</p>\n            <p>Top Score: {props.topScore}</p>\n        </header>\n    )\n}\n\nexport default Header;","import React from \"react\";\n\n\nfunction ImageThumb(props) {\n    return (\n        <div className=\"col-3 shuffle\">\n            {/* Where does the onclick go? */}\n            <img alt={props.name} src={props.image} className=\"img-thumbnail\" onClick={() => props.handleShuffle(props.id, props.clicked)} />\n        </div>\n        // </div >\n    );\n}\n\nexport default ImageThumb;","import React, { Component } from \"react\";\nimport Header from \"./components/Header.js\"\nimport ImageThumb from \"./components/Thumbnails.js\";\nimport images from \"./images.json\";\n\n// What do I want to happen with the onclick?\n// If the card HAS NOT been clicked\n// Display message \n// Add one point to score\n// Shuffle cards\n\n// If the card HAS been clicked\n// Display message \"You lost\"\n//Shufflecards \n\n\nclass App extends Component {\n  // This is the starting \"state\" before anything has been clicked or changed.\n  state = {\n    score: 0,\n    topScore: 0,\n    clicked: false,\n    message: \"\",\n    images: images\n  };\n\n\n  // This function will handle the onclicks and control functions once the images have been clicked. \n  handleShuffle = (id, click) => {\n    console.log(\"banana\")\n    const places = this.state.images;\n    // If an image is clicked, the \"clicked\" state stays the same which is already set in the image.JSON as false.\n    if (click === false) {\n      places.forEach((image, index) => {\n        // This clicked is coming from the JSON file, this is just regular dot notation.\n        places[index].clicked = true;\n      });\n      // If an image is clicked, sort the thumbnails. \n      return this.setState({\n        images: places.sort(() => Math.random() - 0.5),\n        message: \"Game over and you're stuck at home.\",\n        score: 0\n      })\n    }\n    // This is if the user gets it wrong (they have clicked on the same image twice)\n    else {\n      places.forEach((image, index) => {\n        if (id === image.id) {\n          places[index].clicked = false;\n          const newScore = this.state.score + 1;\n          // Not sure why this isn't working... \n          // newTopScore = if the newScore is less than the current top score then the new score is the topScore.\n          const newTopScore = newScore > this.state.topScore ? newScore : this.state.topScore;\n        }\n        // This is where things get a little sticky. \n        return this.setState({\n          images: places.sort(() => Math.random() - 0.5),\n          message: \"You guess correctly!\",\n          // This doesn't render correctly so that's why it's commented out. \n          // score: newScore,\n          // topScore: newTopScore,\n        })\n      })\n    }\n  }\n\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Header />\n        <div className=\"row\">\n          {this.state.images.map(images => (\n            <ImageThumb\n              name={images.name}\n              image={images.image}\n              handleShuffle={this.handleShuffle}\n              clicked={images.clicked}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default App;\n\n\n// INDIVIDUAL FUNCTIONS\n// firstClick = () => {\n//   this.setState({ this.state.count + 1 })\n// }\n\n// secondClick = () => {\n//   this.setState({\n//     clicked = true,\n//     // Resets score to 0.\n//     count = 0,\n//     // Send message that the game is over.\n//     message: \"Game over and you're stuck at home.\"\n//   })\n// }\n\n// addToScore = () => {\n//   this.setState({ this.state.count + 1 })\n// }\n\n\n// // When game over, score will equal top score. \n\n// handleShuffle = () => {\n//   const places = this.state.images;\n// }\n\n// NOTES on the if statemenets. If it matches, I got it right, if it doesn't match, I got it wrong.\n   // if (click === false)  = my score goes up\n      // image.json has to be false\n\n      // if click === true = my score goes down\n      // image.json has to be false \n\n      // if click === true my score goes up\n      // image.json has true\n\n      // in this example we're assuming that banana is right and in the image.json click: banana\n      // if it matches what's in the json that you got it right and the score goes up\n      // if click === banana my score goes up\n      // if click === apple my score goes down\n\n      // if (tomorrow) ---- tomorrow ==== true (this is the default) TRUTHY\n      // if B === true--- if you don't specify anything then it equals true. \n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}